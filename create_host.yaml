---
- name: "Create an external DNS record"
  hosts: dns.example.local
  vars:
    directory: /var/named/
    netsegment: 192.168.1.
    domainfile: example.db
    reversefile: 1.168.192.db
    localdomain: .example.local.
  tasks:
  
  - name: "Get Current Timestamp"
    ansible.builtin.shell: echo "$(date +%Y%m%d)01"
    register: timestamp
    
  - name: "Get Current Serial"
    ansible.builtin.shell: grep Serial {{ directory }}{{ domainfile }} | cut -d";" -f1 | tr -d ' '
    register: currentserial
  
  - name: "Check if Record A Exists"
    ansible.builtin.command: "grep -i -o {{ HOST_NAME }} {{ directory }}{{ domainfile }}"
    register: checka
    ignore_errors: yes

  - name: "Check if PTR Exists"
    ansible.builtin.command: "grep -i -o {{ HOST_NAME }} {{ directory }}{{ reversefile }}"
    register: checkptr
    ignore_errors: yes
    
  - name: "Adding A record"
    ansible.builtin.lineinfile:
      path: "{{ directory }}{{ domainfile }}"
      line: "{{ HOST_NAME }}	     IN  A       {{ netsegment }}{{ HOST_IP }}"
      insertbefore: '; VMware Environment'
    when: checka.stdout | length == 0
    register: recordadd

  - name: "Adding PTR record"
    ansible.builtin.lineinfile:
      path: "{{ directory }}{{ reversefile }}"
      line: "{{ HOST_IP }}              IN  PTR     {{ HOST_NAME }}{{ localdomain }}"
    when: checkptr.stdout | length == 0
    register: ptradd
  
  - name: "Changing time"
    ansible.builtin.replace:
      path: "{{ directory }}{{ item }}"
      regexp: "{{ currentserial.stdout }}"
      replace: "{{ timestamp.stdout }}"
    loop:
      - "{{ reversefile }}"
      - "{{ domainfile }}"
    when:
      - recordadd.changed
      - ptradd.changed
    register: timeadd

  - name: "Restarting named service"
    ansible.builtin.service:
      name: named
      state: restarted
    when:
      - recordadd.changed
      - ptradd.changed

- name: "Create a host with Satellite into Libvirt"
  hosts: "{{ SAT_NAME }}"
  gather_facts: yes
  tasks:

    - name: "Provisioning a host with provisioning callback"
      redhat.satellite.host:
        username: "{{ SAT_USER }}"
        password: "{{ SAT_PASS }}"
        server_url: "{{ SAT_URL }}"
        name: "{{ HOST_NAME }}.example.local"
        organization: "{{ ORG_NAME }}"
        location: "{{ LOCAL_NAME }}"
        hostgroup: "{{ HG_NAME }}"
        compute_attributes:
          start: "1"
        interfaces_attributes:
        - type: "interface"
          subnet: "PROVISIONING"
          domain: "example.local"
          managed: true
          primary: true
          provision: true
          virtual: false
        - type: "interface"
          subnet: "LOCAL"
          domain: "example.local"
          ip: "192.168.1.{{ HOST_IP }}"
          managed: true
          primary: false
          provision: false
          virtual: false
        build: true
        enabled: true
        managed: true
        state: present
...
---
- hosts: all
  gather_facts: yes
  collections:
    - ansible.posix
  tasks:

  - name: "Set the keyboard"
    ansible.builtin.shell: "localectl set-keymap br-thinkpad"

  - name: "Set the timezone"
    ansible.builtin.shell: "timedatectl set-timezone America/Sao_Paulo"
 
  - name: "Create the localuser"
    ansible.builtin.user:
      name: localuser
      comment: "Local User"
      groups: wheel
      append: yes
      shell: /bin/bash
      generate_ssh_key: yes
      password: "{{ USER_PASS }}"
      state: present

  - name: "Comment wheel with password line"
    ansible.builtin.lineinfile:
      path: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '# %wheel        ALL=(ALL)       ALL'
    
  - name: "Uncomment wheel without password line"
    ansible.builtin.lineinfile:
      path: /etc/sudoers
      state: present
      regexp: '^# %wheel'
      line: '%wheel        ALL=(ALL)       NOPASSWD: ALL'

  - name: "Insert SSH public key"
    ansible.builtin.lineinfile:
      path: "{{ item }}/.ssh/authorized_keys"
      line: "{{ SSH_PUB }}"
      create: yes
    loop:
      - /home/localuser
      - /root

  - name: "Enable Serial TTY in Libvirt"
    ansible.builtin.service:
      name: "serial-getty@ttyS0"
      enabled: yes
      state: started

  - name: "Register with the RHEL 9 Activation Key"
    ansible.builtin.shell: "{{ AK_KEY }}"

  - name: "Install the latest version of Apache/HTTPD"
    ansible.builtin.dnf:
      name: httpd
      state: latest

  - name: "Permit traffic in default zone for http/https services"
    ansible.posix.firewalld:
      service: "{{ item }}"
      permanent: true
      immediate: true
      state: enabled
    loop:
      - http
      - https
      
  - name: "Fetch the index.html file"
    ansible.builtin.get_url:
      url: https://people.redhat.com/alolivei/presentation/rhte.html
      dest: /var/www/html/index.html

  - name: "Apply new SELinux file context to the index.html file"
    ansible.builtin.command: restorecon -RFvv /var/www/html/index.html
  
  - name: "Enable the httpd service"
    ansible.builtin.service:
      name: "httpd"
      enabled: yes
      state: started

  - name: "Set the MOTD"
    ansible.builtin.lineinfile:
      path: /usr/bin/redhat-internal-dynamic-motd.sh
      line: |
          #!/bin/bash
          #
          # dynamic motd script by Oliver Haessler <oliver@redhat.com>
          #
          # License: GPLv2

          USER=`whoami`
          HOSTNAME=`uname -n`
          DF_ROOT=`df -Ph | grep Root | awk '{print $4}' | tr -d '\n'`
          DF_HOME=`df -Ph | grep Home | awk '{print $4}' | tr -d '\n'`
          DF_NOTBACKEDUP=`df -Ph | grep NotBackedUp | awk '{print $4}' | tr -d '\n'`
          DF_VIRTUALMACHINES=`df -Ph | grep VirtualMachines | awk '{print $4}' | tr -d '\n'`

          if [ -f /usr/bin/systemd-loginctl ];
          then
              USERS=`systemd-loginctl list-users | grep listed | awk -F" " '{ print $1 }'`
          else
              USERS=`users | wc -w`
          fi

          MEMORY1=`free -t -m | grep "Mem" | awk '{print $3" MB";}'`
          MEMORY2=`free -t -m | grep "Mem" | awk '{print $2" MB";}'`
          PSA=`ps -Afl | wc -l`
          SWAP=`free -m | tail -n 1 | awk '{print $3}'`

          #System uptime
          uptime=`cat /proc/uptime | cut -f1 -d.`
          upDays=$((uptime/60/60/24))
          upHours=$((uptime/60/60%24))
          upMins=$((uptime/60%60))
          upSecs=$((uptime%60))

          #System load
          LOAD1=`cat /proc/loadavg | awk {'print $1'}`
          LOAD5=`cat /proc/loadavg | awk {'print $2'}`
          LOAD15=`cat /proc/loadavg | awk {'print $3'}`

          # Hardware info
          Manufacturer=`cat /sys/devices/virtual/dmi/id/chassis_vendor`
          MachineType=`cat /sys/devices/virtual/dmi/id/product_name`
          MachineModel=`cat /sys/devices/virtual/dmi/id/product_version`

          # check if user is root, as you need root permissions to read the product_serial files
          if [ "$USER" == "root" ]; then
              SerialNumber=`cat /sys/devices/virtual/dmi/id/product_serial`
          else
              SerialNumber="Only accessible by root"
          fi

          # set Release
          RELEASE=`cat /etc/redhat-release`

          # set tput values
          reset=$(tput sgr0)
          bold=$(tput bold)
          red=$(tput setaf 1)
          magenta=$(tput setaf 5)

          # file to check for root access
          sudofile="/etc/sudoers.d/redhat-internal-user-sudo"

          # clear the screen (clear is actually sending a escape code that shows in the screen. The Echo line below is preventing this
          echo -en "\e[H\e[2J"

          echo "==================================="$bold""$magenta"User  Data"$reset"===================================
          - Hostname....: $HOSTNAME
          - Release.....: $RELEASE
          - Users.......: Currently $USERS user(s) logged on
          ================================="$bold""$magenta"Hardware  Data"$reset"=================================
          - Manufacturer:................: $Manufacturer
          - Machine Type:................: $MachineType
          - Machine Model:...............: $MachineModel
          - Serial Number:...............: $SerialNumber
          =================================="$bold""$magenta"System  Data"$reset"==================================
          - CPU usage....................: $LOAD1, $LOAD5, $LOAD15 (1, 5, 15 min)
          - Memory used..................: $MEMORY1 / $MEMORY2
          - Swap in use..................: $SWAP MB
          - System uptime................: $upDays days $upHours hours $upMins minutes $upSecs seconds
          - Disk space Root..............: $DF_ROOT remaining
          - Disk space Home..............: $DF_HOME remaining
          ================================================================================"

          # check if sudo file exists and user has sudo access
          if [ -s $sudofile ]; then
              if [[ $(grep -qE '#.*ALL' $sudofile)$? = 1 ]] && [[ $(grep -qE 'ALL' $sudofile)$? = 0 ]]; then
                  echo ""$bold""$red"                             User has sudo access!!"$reset"
          ================================================================================"
              fi
          fi
      create: yes
      owner: root
      group: root
      mode: '0755'

  - name: "Set the MOTD for profiles"
    ansible.builtin.lineinfile:
      path: /etc/profile
      line: "/usr/bin/redhat-internal-dynamic-motd.sh"
      create: yes
     
  - name: "Create a test file"
    ansible.builtin.lineinfile:
      path: /tmp/techexchange2023.txt
      line: "Ansible Callback Plugin Works!"
      create: yes
...
